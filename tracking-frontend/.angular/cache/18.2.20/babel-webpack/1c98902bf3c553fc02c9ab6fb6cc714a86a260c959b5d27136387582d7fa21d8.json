{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(router) {\n      this.router = router;\n      this.STORAGE_KEY = 'auth_token_v1';\n      const saved = localStorage.getItem(this.STORAGE_KEY);\n      this.token = saved ? JSON.parse(saved) : null;\n    }\n    get accessToken() {\n      return this.token?.access_token ?? null;\n    }\n    isAuthenticated() {\n      const t = this.accessToken;\n      if (!t) return false;\n      try {\n        const payload = JSON.parse(atob(t.split('.')[1]));\n        if (payload.exp) return Date.now() < payload.exp * 1000;\n      } catch {}\n      return true;\n    }\n    username() {\n      const t = this.accessToken;\n      if (!t) return '';\n      try {\n        const p = JSON.parse(atob(t.split('.')[1]));\n        return p.sub || p.username || '';\n      } catch {\n        return '';\n      }\n    }\n    roles() {\n      const t = this.accessToken;\n      if (!t) return [];\n      try {\n        const p = JSON.parse(atob(t.split('.')[1]));\n        return p.roles || p.authorities || [];\n      } catch {\n        return [];\n      }\n    }\n    hasRole(role) {\n      return this.roles().includes(role);\n    }\n    saveToken(tok) {\n      this.token = tok;\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(tok));\n    }\n    logout() {\n      this.token = null;\n      localStorage.removeItem(this.STORAGE_KEY);\n      this.router.navigate(['/login']);\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n        i0.ɵɵinvalidFactory();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}