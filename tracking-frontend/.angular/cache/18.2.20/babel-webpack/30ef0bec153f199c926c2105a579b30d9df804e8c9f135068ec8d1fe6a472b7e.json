{"ast":null,"code":"import _asyncToGenerator from \"D:/WebAvanzada2025/Spring/ProyectoUnidad/tracking-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpParams, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthPkceService = /*#__PURE__*/(() => {\n  class AuthPkceService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.codeVerifierKey = 'pkce.verifier';\n      this.stateKey = 'pkce.state';\n    }\n    base64UrlEncode(buf) {\n      let str = btoa(String.fromCharCode(...new Uint8Array(buf)));\n      return str.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n    }\n    sha256(input) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const enc = new TextEncoder().encode(input);\n        const digest = yield crypto.subtle.digest('SHA-256', enc);\n        return _this.base64UrlEncode(digest);\n      })();\n    }\n    login() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const verifier = _this2.base64UrlEncode(crypto.getRandomValues(new Uint8Array(32)));\n        const challenge = yield _this2.sha256(verifier);\n        const state = _this2.base64UrlEncode(crypto.getRandomValues(new Uint8Array(16)));\n        localStorage.setItem(_this2.codeVerifierKey, verifier);\n        localStorage.setItem(_this2.stateKey, state);\n        const params = new URLSearchParams({\n          response_type: 'code',\n          client_id: environment.oauth.clientId,\n          redirect_uri: environment.oauth.redirectUri,\n          scope: 'openid profile clientes.read pedidos.read pedidos.write',\n          code_challenge: challenge,\n          code_challenge_method: 'S256',\n          state\n        });\n        window.location.href = `${environment.oauth.authorizeUrl}?${params.toString()}`;\n      })();\n    }\n    exchangeCode(code, state) {\n      const expected = localStorage.getItem(this.stateKey) || '';\n      const verifier = localStorage.getItem(this.codeVerifierKey) || '';\n      localStorage.removeItem(this.stateKey);\n      localStorage.removeItem(this.codeVerifierKey);\n      if (state !== expected) throw new Error('PKCE state mismatch');\n      const body = new HttpParams().set('grant_type', 'authorization_code').set('code', code).set('redirect_uri', environment.oauth.redirectUri).set('client_id', environment.oauth.clientId).set('code_verifier', verifier);\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/x-www-form-urlencoded'\n      });\n      return this.http.post(environment.oauth.tokenUrl, body.toString(), {\n        headers\n      });\n    }\n    static {\n      this.ɵfac = function AuthPkceService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || AuthPkceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthPkceService,\n        factory: AuthPkceService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthPkceService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}