{"ast":null,"code":"import _asyncToGenerator from \"D:/WebAvanzada2025/Spring/ProyectoUnidad/tracking-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpParams, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nfunction base64url(input) {\n  const bytes = new Uint8Array(input);\n  let str = '';\n  bytes.forEach(b => str += String.fromCharCode(b));\n  return btoa(str).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n}\nexport let AuthPkceService = /*#__PURE__*/(() => {\n  class AuthPkceService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.STORAGE = 'auth_token_v1';\n      this.CODE_VERIFIER = 'pkce_code_verifier';\n      this.STATE = 'pkce_state';\n    }\n    login() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const state = crypto.randomUUID();\n        localStorage.setItem(_this.STATE, state);\n        const codeVerifier = base64url(crypto.getRandomValues(new Uint8Array(32)).buffer);\n        localStorage.setItem(_this.CODE_VERIFIER, codeVerifier);\n        const enc = new TextEncoder();\n        const digest = yield crypto.subtle.digest('SHA-256', enc.encode(codeVerifier));\n        const codeChallenge = base64url(digest);\n        const params = new URLSearchParams({\n          response_type: 'code',\n          client_id: environment.auth.clientId,\n          redirect_uri: environment.auth.redirectUri,\n          scope: environment.auth.scopes.join(' '),\n          code_challenge: codeChallenge,\n          code_challenge_method: 'S256',\n          state\n        });\n        window.location.href = `${environment.endpoints.authAuthorize}?${params.toString()}`;\n      })();\n    }\n    exchangeCode(code, state) {\n      const savedState = localStorage.getItem(this.STATE);\n      if (!savedState || savedState != state) throw new Error('Invalid state');\n      const codeVerifier = localStorage.getItem(this.CODE_VERIFIER);\n      const body = new HttpParams().set('grant_type', 'authorization_code').set('client_id', environment.auth.clientId).set('code', code).set('redirect_uri', environment.auth.redirectUri).set('code_verifier', codeVerifier);\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/x-www-form-urlencoded'\n      });\n      return this.http.post(environment.endpoints.authToken, body.toString(), {\n        headers\n      });\n    }\n    save(tok) {\n      localStorage.setItem(this.STORAGE, JSON.stringify(tok));\n    }\n    clear() {\n      localStorage.removeItem(this.STORAGE);\n    }\n    static {\n      this.ɵfac = function AuthPkceService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || AuthPkceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthPkceService,\n        factory: AuthPkceService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthPkceService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}