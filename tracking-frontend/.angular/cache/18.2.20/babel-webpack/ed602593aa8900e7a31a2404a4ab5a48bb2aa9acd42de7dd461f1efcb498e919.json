{"ast":null,"code":"var __esDecorate = this && this.__esDecorate || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\nvar __runInitializers = this && this.__runInitializers || function (thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\nimport { Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute } from '@angular/router';\nimport { OrdersService } from '../../core/services/orders.service';\nimport { TrackingService } from '../../core/services/tracking.service';\nimport { StatusBadgeComponent } from '../../shared/components/status-badge.component';\nlet OrderDetailComponent = (() => {\n  let _classDecorators = [Component({\n    standalone: true,\n    selector: 'app-order-detail',\n    imports: [CommonModule, StatusBadgeComponent],\n    template: `\n    <h2>Pedido #{{order?.id}}</h2>\n    <div *ngIf=\"order; else loading\">\n      <p><b>Producto:</b> {{order!.product}}</p>\n      <p><b>Direcci√≥n:</b> {{order!.address}}</p>\n      <p><b>Status (MySQL):</b> {{order!.status}} <small>({{ order!.updatedAt || 's/fecha' }})</small></p>\n\n      <ng-container *ngIf=\"tracking\">\n        <p><b>Estado (Redis):</b> {{tracking!.status}} <small>({{ tracking!.updatedAt || 's/fecha' }})</small></p>\n        <status-badge [text]=\"staleText\" [warn]=\"stale\" [ok]=\"!stale && !!tracking\"></status-badge>\n      </ng-container>\n\n      <p *ngIf=\"!tracking\">No hay datos de tracking (Redis).</p>\n    </div>\n    <ng-template #loading>Cargando...</ng-template>\n  `\n  })];\n  let _classDescriptor;\n  let _classExtraInitializers = [];\n  let _classThis;\n  var OrderDetailComponent = class {\n    static {\n      _classThis = this;\n    }\n    constructor() {\n      this.route = inject(ActivatedRoute);\n      this.orders = inject(OrdersService);\n      this.trackingSvc = inject(TrackingService);\n      this.stale = false;\n      this.staleText = '';\n    }\n    static {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n      __esDecorate(null, _classDescriptor = {\n        value: _classThis\n      }, _classDecorators, {\n        kind: \"class\",\n        name: _classThis.name,\n        metadata: _metadata\n      }, null, _classExtraInitializers);\n      OrderDetailComponent = _classThis = _classDescriptor.value;\n      if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n      __runInitializers(_classThis, _classExtraInitializers);\n    }\n    ngOnInit() {\n      const id = this.route.snapshot.paramMap.get('id');\n      this.orders.getById(id).subscribe(o => {\n        this.order = o;\n        this.fetchTracking(id);\n      });\n    }\n    fetchTracking(id) {\n      this.trackingSvc.getState(id).subscribe(t => {\n        this.tracking = t;\n        this.checkConsistency();\n      }, _ => {\n        this.tracking = undefined;\n        this.stale = true;\n        this.staleText = 'Sin tracking (posible inconsistencia)';\n      });\n    }\n    checkConsistency() {\n      if (!this.order || !this.tracking) {\n        this.stale = true;\n        this.staleText = 'Datos incompletos';\n        return;\n      }\n      const tOrder = this.order.updatedAt ? Date.parse(this.order.updatedAt) : 0;\n      const tRedis = this.tracking.updatedAt ? Date.parse(this.tracking.updatedAt) : 0;\n      this.stale = tRedis + 5000 < tOrder;\n      this.staleText = this.stale ? 'Redis desactualizado respecto a MySQL' : 'Consistente';\n    }\n  };\n  return OrderDetailComponent = _classThis;\n})();\nexport { OrderDetailComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}